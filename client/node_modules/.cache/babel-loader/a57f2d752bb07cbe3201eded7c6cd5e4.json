{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.type';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.action';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport function* fetchCollectionAsync() {\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionsMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} // collectionRef.get()\n//     .then(snapshot => {\n//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//         // console.log(collectionsMap);\n//         dispatch(fetchCollectionsSuccess(collectionsMap));\n//     })\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n// yield console.log('i am fired');\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}\nexport function* shopSaga() {\n  yield all;\n}","map":{"version":3,"sources":["D:/monsters/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","fetchCollectionAsync","collectionRef","collection","snapshot","get","collectionsMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_START","shopSaga","all"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SACIC,uBADJ,EAEIC,uBAFJ,QAGO,eAHP;AAMA,SACIC,SADJ,EAEIC,+BAFJ,QAGO,+BAHP;AAMA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,MAAI;AACA,UAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,cAAc,GAAG,MAAMZ,IAAI,CAACM,+BAAD,EAAkCI,QAAlC,CAAjC;AACA,UAAMT,GAAG,CAACE,uBAAuB,CAACS,cAAD,CAAxB,CAAT;AACH,GALD,CAMA,OAAOC,KAAP,EAAc;AACV,UAAMZ,GAAG,CAACG,uBAAuB,CAACS,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMhB,UAAU,CACZG,eAAe,CAACc,uBADJ,EAEZT,oBAFY,CAAhB;AAIH;AAED,OAAO,UAAUU,QAAV,GAAqB;AACxB,QAAMC,GAAN;AACH","sourcesContent":["import { takeLatest, call, put } from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.type';\r\nimport {\r\n    fetchCollectionsSuccess,\r\n    fetchCollectionsFailure\r\n} from './shop.action';\r\n\r\n\r\nimport {\r\n    firestore,\r\n    convertCollectionsSnapshotToMap\r\n} from '../../firebase/firebase.utils';\r\n\r\n\r\nexport function* fetchCollectionAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    }\r\n    catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n}\r\n// collectionRef.get()\r\n//     .then(snapshot => {\r\n//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//         // console.log(collectionsMap);\r\n//         dispatch(fetchCollectionsSuccess(collectionsMap));\r\n//     })\r\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n// yield console.log('i am fired');\r\n\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n    );\r\n}\r\n\r\nexport function* shopSaga() {\r\n    yield all;\r\n}"]},"metadata":{},"sourceType":"module"}