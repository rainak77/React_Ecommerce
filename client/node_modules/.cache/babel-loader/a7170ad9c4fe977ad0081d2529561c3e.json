{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from \"../user/user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { SignInSuccess, SignInFailure } from './user.action';\nexport function* getSnapShot() {}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    console.log(userSnapshot.data());\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    const userRef = yield call(createUserProfileDocument, user);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(SignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(SignInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["D:/monsters/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","SignInSuccess","SignInFailure","getSnapShot","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","console","log","data","id","error","onGoogleSignInStart","GOOGLE_SIGN_IN_START","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_START","isUserAuthenticated","userAuth","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from \"../user/user.types\";\r\nimport {\r\n    auth,\r\n    googleProvider,\r\n    createUserProfileDocument,\r\n    getCurrentUser\r\n} from '../../firebase/firebase.utils';\r\n\r\nimport { SignInSuccess, SignInFailure } from './user.action';\r\n\r\nexport function* getSnapShot(){\r\n\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        console.log(userSnapshot.data());\r\n        yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    }\r\n    catch (error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\nexport function* onGoogleSignInStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\r\n}\r\n\r\n\r\n\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        const userRef = yield call(createUserProfileDocument, user);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    }\r\n    catch (error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\r\n}\r\n\r\n\r\n\r\nexport function* isUserAuthenticated() {\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        const userRef = yield call(createUserProfileDocument, userAuth);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(SignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n    }\r\n    catch (error) {\r\n        yield put(SignInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\n\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}