{"ast":null,"code":"import _regeneratorRuntime from\"D:\\\\monsters\\\\crwn-clothing\\\\client\\\\node_modules\\\\@babel\\\\runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionAsync),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(fetchCollectionsStart),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(shopSaga);import{takeLatest,call,put,all}from'redux-saga/effects';import ShopActionTypes from'./shop.type';import{fetchCollectionsSuccess,fetchCollectionsFailure}from'./shop.action';import{firestore,convertCollectionsSnapshotToMap}from'../../firebase/firebase.utils';export function fetchCollectionAsync(){var collectionRef,snapshot,collectionsMap;return _regeneratorRuntime.wrap(function fetchCollectionAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;collectionRef=firestore.collection('collections');_context.next=4;return collectionRef.get();case 4:snapshot=_context.sent;_context.next=7;return call(convertCollectionsSnapshotToMap,snapshot);case 7:collectionsMap=_context.sent;_context.next=10;return put(fetchCollectionsSuccess(collectionsMap));case 10:_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);_context.next=16;return put(fetchCollectionsFailure(_context.t0.message));case 16:case\"end\":return _context.stop();}}},_marked,null,[[0,12]]);}// collectionRef.get()\n//     .then(snapshot => {\n//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n//         // console.log(collectionsMap);\n//         dispatch(fetchCollectionsSuccess(collectionsMap));\n//     })\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n// yield console.log('i am fired');\nexport function fetchCollectionsStart(){return _regeneratorRuntime.wrap(function fetchCollectionsStart$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeLatest(ShopActionTypes.FETCH_COLLECTIONS_START,fetchCollectionAsync);case 2:case\"end\":return _context2.stop();}}},_marked2);}export function shopSaga(){return _regeneratorRuntime.wrap(function shopSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([call(fetchCollectionsStart)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}","map":{"version":3,"sources":["D:/monsters/crwn-clothing/client/src/redux/shop/shop.sagas.js"],"names":["fetchCollectionAsync","fetchCollectionsStart","shopSaga","takeLatest","call","put","all","ShopActionTypes","fetchCollectionsSuccess","fetchCollectionsFailure","firestore","convertCollectionsSnapshotToMap","collectionRef","collection","get","snapshot","collectionsMap","message","FETCH_COLLECTIONS_START"],"mappings":"kKAciBA,oB,iDAqBAC,qB,iDAOAC,Q,EA1CjB,OAASC,UAAT,CAAqBC,IAArB,CAA2BC,GAA3B,CAAgCC,GAAhC,KAA2C,oBAA3C,CACA,MAAOC,CAAAA,eAAP,KAA4B,aAA5B,CACA,OACIC,uBADJ,CAEIC,uBAFJ,KAGO,eAHP,CAMA,OACIC,SADJ,CAEIC,+BAFJ,KAGO,+BAHP,CAMA,MAAO,SAAUX,CAAAA,oBAAV,0LAEOY,aAFP,CAEuBF,SAAS,CAACG,UAAV,CAAqB,aAArB,CAFvB,iBAGkB,MAAMD,CAAAA,aAAa,CAACE,GAAd,EAAN,CAHlB,OAGOC,QAHP,+BAIwB,MAAMX,CAAAA,IAAI,CAACO,+BAAD,CAAkCI,QAAlC,CAAV,CAJxB,OAIOC,cAJP,gCAKC,MAAMX,CAAAA,GAAG,CAACG,uBAAuB,CAACQ,cAAD,CAAxB,CAAT,CALD,0GAQC,MAAMX,CAAAA,GAAG,CAACI,uBAAuB,CAAC,YAAMQ,OAAP,CAAxB,CAAT,CARD,qEAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,MAAO,SAAUhB,CAAAA,qBAAV,qJACH,MAAME,CAAAA,UAAU,CACZI,eAAe,CAACW,uBADJ,CAEZlB,oBAFY,CAAhB,CADG,wDAOP,MAAO,SAAUE,CAAAA,QAAV,wIACH,MAAMI,CAAAA,GAAG,CAAC,CAACF,IAAI,CAACH,qBAAD,CAAL,CAAD,CAAT,CADG","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\r\nimport ShopActionTypes from './shop.type';\r\nimport {\r\n    fetchCollectionsSuccess,\r\n    fetchCollectionsFailure\r\n} from './shop.action';\r\n\r\n\r\nimport {\r\n    firestore,\r\n    convertCollectionsSnapshotToMap\r\n} from '../../firebase/firebase.utils';\r\n\r\n\r\nexport function* fetchCollectionAsync() {\r\n    try {\r\n        const collectionRef = firestore.collection('collections');\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionsMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n        yield put(fetchCollectionsSuccess(collectionsMap));\r\n    }\r\n    catch (error) {\r\n        yield put(fetchCollectionsFailure(error.message));\r\n    }\r\n}\r\n// collectionRef.get()\r\n//     .then(snapshot => {\r\n//         const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\r\n//         // console.log(collectionsMap);\r\n//         dispatch(fetchCollectionsSuccess(collectionsMap));\r\n//     })\r\n//     .catch(error => dispatch(fetchCollectionsFailure(error.message)));\r\n// yield console.log('i am fired');\r\n\r\n\r\nexport function* fetchCollectionsStart() {\r\n    yield takeLatest(\r\n        ShopActionTypes.FETCH_COLLECTIONS_START,\r\n        fetchCollectionAsync\r\n    );\r\n}\r\n\r\nexport function* shopSaga() {\r\n    yield all([call(fetchCollectionsStart)]);\r\n}"]},"metadata":{},"sourceType":"module"}